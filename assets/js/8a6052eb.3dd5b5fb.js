"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[63],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),g=i,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||a;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},47282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const a={sidebar_position:2},o="Getting Started",l={unversionedId:"GettingStarted",id:"GettingStarted",title:"Getting Started",description:"Installing",source:"@site/docs/GettingStarted.md",sourceDirName:".",slug:"/GettingStarted",permalink:"/axis/docs/GettingStarted",draft:!1,editUrl:"https://github.com/Sebastian2852/axis/edit/master/docs/GettingStarted.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Axis",permalink:"/axis/docs/intro"},next:{title:"Modules",permalink:"/axis/docs/Modules"}},s={},c=[{value:"Installing",id:"installing",level:2},{value:"Wally",id:"wally",level:3},{value:"Using",id:"using",level:2},{value:"Booting",id:"booting",level:3},{value:"Notes",id:"notes",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started"},"Getting Started"),(0,i.kt)("h2",{id:"installing"},"Installing"),(0,i.kt)("h3",{id:"wally"},"Wally"),(0,i.kt)("p",null,"Axis is available on Wally (not very stable atm) ",(0,i.kt)("a",{parentName:"p",href:"https://wally.run/package/sebastian2852/axis"},"here"),"."),(0,i.kt)("h2",{id:"using"},"Using"),(0,i.kt)("h3",{id:"booting"},"Booting"),(0,i.kt)("p",null,"Booting up axis is as simple as 1 line of code. Keep in mind that axis does need to be booted from the client and the server. Firstly lets boot axis on the server:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Startup.server.luau\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Axis = require(ReplicatedStorage.Packages.Axis)\n\nAxis:Boot():andThen(function()\n    print("Axis booted")\nend):catch(warn)\n')),(0,i.kt)("p",null,'Pressing play should result with "Axis booted" being printed in the output.'),(0,i.kt)("p",null,"Great we have booted axis from the server, now the client. The process is identical:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'-- Startup.client.luau\nlocal ReplicatedStorage = game:GetService("ReplicatedStorage")\nlocal Axis = require(ReplicatedStorage.Packages.Axis)\n\nAxis:Boot():andThen(function()\n    print("Axis booted")\nend):catch(warn)\n')),(0,i.kt)("p",null,'Having both these scripts should result in "Axis booted" being printed from the server and then the client in the output.'),(0,i.kt)("h3",{id:"notes"},"Notes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Axis is designed to work only in modules scripts. These 2 "Startup" scripts should be the only normal scripts in your game.'),(0,i.kt)("li",{parentName:"ul"},"Adding anything (like modules or controllers) to axis must come before booting!!!")))}d.isMDXComponent=!0}}]);